// تحسين أداء المصادقة في queryClient.ts
export const getQueryFn = (options = { on401: "throw" }) => 
  async ({ queryKey }) => {
    const path = Array.isArray(queryKey) ? queryKey[0] : queryKey;
    try {
      const url = `${path}${path.includes("?") ? "&" : "?"}cache=${Date.now()}`;
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);

      const response = await fetch(url, {
        credentials: "include",
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (response.status === 401) {
        if (options.on401 === "returnNull") return null;
        throw new Error("غير مصرح");
      }

      if (!response.ok) {
        throw new Error(`خطأ في الطلب: ${response.statusText}`);
      }

      return await response.json();
    } catch (err) {
      console.error("خطأ في جلب البيانات:", err);
      throw err;
    }
};

// مثال لتحسين تجربة التحميل في الواجهة باستخدام Skeleton
const PropertySkeleton = () => (
  <div className="bg-white rounded-2xl overflow-hidden shadow-lg animate-pulse">
    <div className="h-56 md:h-64 bg-gray-200"></div>
    <div className="p-4 md:p-5">
      <div className="flex justify-between items-start mb-3">
        <div className="w-2/3">
          <div className="h-6 bg-gray-200 rounded mb-2"></div>
          <div className="h-4 bg-gray-200 rounded w-3/4"></div>
        </div>
        <div className="w-1/4">
          <div className="h-6 bg-gray-200 rounded mb-1"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        </div>
      </div>
      <div className="pt-3 border-t border-gray-100">
        <div className="flex justify-between">
          <div className="w-1/2 h-4 bg-gray-200 rounded"></div>
          <div className="w-1/3 h-4 bg-gray-200 rounded"></div>
        </div>
      </div>
    </div>
  </div>
);

// كاش على مستوى السيرفر باستخدام NodeCache
import NodeCache from 'node-cache';
const apiCache = new NodeCache({ stdTTL: 300 });

app.use((req, res, next) => {
  if (req.method !== 'GET') return next();
  if (req.path === '/api/me' || req.path.includes('/api/auth')) return next();

  const key = `__apiCache__${req.originalUrl || req.url}`;
  const cachedData = apiCache.get(key);

  if (cachedData) {
    console.log('[cache] Serving from cache:', req.path);
    return res.json(cachedData);
  }

  const originalJson = res.json;
  res.json = function(data) {
    apiCache.set(key, data);
    return originalJson.call(this, data);
  };

  next();
});
