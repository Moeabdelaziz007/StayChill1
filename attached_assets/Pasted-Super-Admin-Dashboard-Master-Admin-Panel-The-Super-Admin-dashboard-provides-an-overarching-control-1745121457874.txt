Super Admin Dashboard (Master Admin Panel)
The Super Admin dashboard provides an overarching control center for the entire StayChill application. Only authorized Super Admin users (likely just internal staff or the app owner) can access this panel. As a Super Admin, one can manage all aspects of the platform, so this dashboard will be feature-rich and comprehensive. A robust admin panel is paramount for efficient app management​
abservetech.com
. Key functions of the Super Admin panel include:
Global Overview & Analytics: A homepage showing KPIs and stats: total users, total properties, total bookings, revenue generated, active bookings today, etc. This gives a quick health check of the platform. Charts or summary cards (e.g. using a chart library with React) can visualize trends (bookings over time, new users, most popular locations).
User Management: View the list of all users (with search and filters). For each user, show profile info and role (normal user or property admin). The Super Admin can add or remove users. For adding, they might create a new account via Firebase Admin SDK or send an invite link. For removal, they can disable or delete an account (which would also remove their data or mark it inactive). Another important action: promoting a user to Property Admin (or revoking that role). This can be implemented by setting a custom claim role: "PropertyAdmin" on that user’s Auth record, or updating a Firestore field like isPropertyAdmin=true. The dashboard should provide a one-click action to upgrade a user’s role. Proper confirmation dialogues should accompany destructive actions like deletion or role changes. All user management changes should invoke Cloud Functions or secure server APIs that perform the actual Auth/Firestore updates (to maintain security).
Property & Booking Management: Although property owners manage their own listings, the Super Admin should have oversight of all properties and bookings. This means a section to list All Properties in the system (with ability to filter by city, or by owner, etc.) and intervene if needed (e.g. deactivate a listing that violates terms). Likewise, All Bookings can be shown, perhaps for customer support purposes – e.g. if a user calls support, the admin can look up their booking and assist or modify it. The Super Admin can have edit rights on any property or booking (for example, change a booking’s status or reassign an owner), but such powers should be used sparingly. It’s wise to log these actions for audit (e.g. keep an adminLogs collection of actions).
Global Settings & Configurations: An interface for modifying app-wide settings:
Theme & Branding: Options to change the theme colors, logo, or toggle dark/light mode for the app. For instance, the admin could upload a new logo or set primary color which is then distributed via theming (possibly stored in Firestore or Remote Config and the client app reads it to apply branding).
Offers & Promotions: Manage global promotions like seasonal discounts, promo codes, or referral reward values. For example, create a new promo code “SUMMER2025” with 15% off all bookings in June. Or adjust the referral bonus points amount. The Super Admin dashboard can have a form to define these offers (which get saved to an offers collection or Remote Config for the app to apply).
Loyalty Program Rules: As part of the rewards system, the admin could adjust points rules (e.g. how many points per dollar spent) or add new reward options. This keeps the loyalty system flexible over time.
Content Management & Moderation: If the app allows user-generated content (like reviews or property images), the admin panel should provide tools to monitor and moderate this content. For example, viewing all reviews and removing inappropriate ones, or approving property listings that are flagged.
Notifications & Communication: The Super Admin might send out push notifications or emails to users (e.g. announcements of new features or promotions). The dashboard could include a simple interface to draft a message and send via Firebase Cloud Messaging to all users or a segment.
UI Design: The Super Admin interface will be more complex, so a clear layout is important. A typical design is a sidebar menu with sections: Dashboard, Users, Properties, Bookings, Loyalty & Offers, Settings, etc. Each section opens a page with tables or cards of data and actions. Using Tailwind, we can maintain a consistent style – for example, using utility classes to create a table with striped rows for user list, or cards with shadow for summary stats. We will also incorporate modals for create/edit forms (e.g. adding a new offer) to avoid navigating away from context. The UI should emphasize that this is an admin area – perhaps a different color scheme (maybe a darker navbar) to distinguish from the customer-facing app. Also include confirmation steps for critical actions (deleting a user or property). Security: Only Super Admins (authenticated and with an appropriate flag) should be able to access this dashboard’s data. Implement this by setting a custom claim like admin:true on Super Admin users (using the Firebase Admin SDK). Firestore rules then can allow read/write on all data only if auth.token.admin == true​
firebase.google.com
. Meanwhile, property admins and normal users would be forbidden from these high-level paths. Additionally, the front-end should route-check: if a non-admin somehow tries to access the admin URL, it should redirect them away. By combining client checks, server rules, and Auth claims, we ensure comprehensive control is only in the hands of Super Admins.
